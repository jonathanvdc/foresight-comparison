(with-dynamic-cost
  (datatype Expr
      (Mat i64 i64)
      (Mul Expr Expr)
))

(let m0 (Mat 100 100))
(let m1 (Mat 100 100))
(let m2 (Mat 100 100))
(let m3 (Mat 100 100))
(let m4 (Mat 100 100))
(let m5 (Mat 100 100))
(let m6 (Mat 100 100))
(let m7 (Mat 100 100))
(let m8 (Mat 100 100))
(let m9 (Mat 100 100))
(let m10 (Mat 100 100))
(let m11 (Mat 100 100))
(let m12 (Mat 100 100))
(let m13 (Mat 100 100))
(let m14 (Mat 100 100))
(let m15 (Mat 100 100))
(let m16 (Mat 100 100))
(let m17 (Mat 100 100))
(let m18 (Mat 100 100))
(let m19 (Mat 100 100))
(let m20 (Mat 100 100))
(let mm0 (Mul m0 m1))
(let mm1 (Mul mm0 m2))
(let mm2 (Mul mm1 m3))
(let mm3 (Mul mm2 m4))
(let mm4 (Mul mm3 m5))
(let mm5 (Mul mm4 m6))
(let mm6 (Mul mm5 m7))
(let mm7 (Mul mm6 m8))
(let mm8 (Mul mm7 m9))
(let mm9 (Mul mm8 m10))
(let mm10 (Mul mm9 m11))
(let mm11 (Mul mm10 m12))
(let mm12 (Mul mm11 m13))
(let mm13 (Mul mm12 m14))
(let mm14 (Mul mm13 m15))
(let mm15 (Mul mm14 m16))
(let mm16 (Mul mm15 m17))
(let mm17 (Mul mm16 m18))
(let mm18 (Mul mm17 m19))
(let mm19 (Mul mm18 m20))

(function nrows (Expr) i64 :no-merge)
(function ncols (Expr) i64 :no-merge)

(rule (
	(= M (Mat ?nr ?nc))
) (
	(set (nrows M) ?nr)
	(set (ncols M) ?nc)
))

(rule (
	(= AB (Mul ?A ?B))
	(= rA (nrows ?A))
	(= (ncols ?A) (nrows ?B))
    (= cB (ncols ?B))
) (
	(set (nrows AB) rA)
    (set (ncols AB) cB)
))

(rule (
    (Mul ?A ?B)
    (= rA (nrows ?A))
    (= cA (ncols ?A))
    (= cB (ncols ?B))
) (
    (set-cost (Mul ?A ?B) (* rA (* cA cB)))
))

(birewrite (Mul ?A (Mul ?B ?C)) (Mul (Mul ?A ?B) ?C))

(run-schedule (saturate (run)))

(extract mm19)
